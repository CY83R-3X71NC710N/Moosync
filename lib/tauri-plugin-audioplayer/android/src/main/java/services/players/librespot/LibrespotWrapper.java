// Moosync
// Copyright (C) 2024, 2025  Moosync <support@moosync.app>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Moosync
// Copyright (C) 2025 Moosync
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

// Automatically generated by flapigen
package services.players.librespot;
import androidx.annotation.NonNull;

public final class LibrespotWrapper {

    public LibrespotWrapper(@NonNull LibrespotCallbacks callbacks) {
        mNativeObj = init(callbacks);
    }
    private static native long init(LibrespotCallbacks callbacks);

    public final void load(@NonNull String src, boolean autoplay) {
        do_load(mNativeObj, src, autoplay);
    }
    private static native void do_load(long self, @NonNull String src, boolean autoplay);

    public final void play() {
        do_play(mNativeObj);
    }
    private static native void do_play(long self);

    public final void pause() {
        do_pause(mNativeObj);
    }
    private static native void do_pause(long self);

    public final void initializeLibrespot(@NonNull String credentials_path, @NonNull String audio_path, @NonNull String access_token) {
        do_initializeLibrespot(mNativeObj, credentials_path, audio_path, access_token);
    }
    private static native void do_initializeLibrespot(long self, @NonNull String credentials_path, @NonNull String audio_path, @NonNull String access_token);

    public static native void initializeAndroidContext();

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ LibrespotWrapper(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}
